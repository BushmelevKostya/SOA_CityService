/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package itmo.cityservice.api;

import itmo.cityservice.controller.ApiUtil;
import itmo.cityservice.model.dto.CitiesCarCodeAvgGet200Response;
import itmo.cityservice.model.dto.CitiesSeaLevelDelete200Response;
import itmo.cityservice.model.dto.CityDTO;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;

import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-16T12:00:39.661908700+03:00[Europe/Moscow]")
@Validated
@Controller
public interface UtilsApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * GET /cities/car-code/avg : Получить среднее значение кода автомобиля
     *
     * @return Успешное выполнение операции (status code 200)
     *         or Коллекция пуста (status code 404)
     *         or Непредвиденная ошибка (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cities/car-code/avg",
        produces = { "application/xml" }
    )
    default ResponseEntity<CitiesCarCodeAvgGet200Response> citiesCarCodeAvgGet(
        
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<AverageResult> <average>3.149</average> </AverageResult>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cities/name/min : Получить город с минимальным названием
     *
     * @return Успешное выполнение операции (status code 200)
     *         or Коллекция пуста (status code 404)
     *         or Непредвиденная ошибка (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cities/name/min",
        produces = { "application/xml" }
    )
    default ResponseEntity<CityDTO> citiesNameMinGet(
        
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<City> <id>123456789</id> <name>Санкт-Петербург</name> <creationDate>2000-01-23T04:56:07.000Z</creationDate> <area>123</area> <population>123</population> <metersAboveSeaLevel>3.149</metersAboveSeaLevel> <carCode>123456789</carCode> <climate>aeiou</climate> <standardOfLiving>aeiou</standardOfLiving> </City>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * DELETE /cities/sea-level : Удалить города по высоте над уровнем моря
     *
     * @param metersAboveSeaLevel Значение высоты над уровнем моря для удаления (required)
     * @return Успешное выполнение операции (status code 200)
     *         or Неверный параметр (status code 400)
     *         or Непредвиденная ошибка (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/cities/sea-level",
        produces = { "application/xml" }
    )
    default ResponseEntity<CitiesSeaLevelDelete200Response> citiesSeaLevelDelete(
        @NotNull  @Valid @RequestParam(value = "metersAboveSeaLevel", required = true) Double metersAboveSeaLevel
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<DeleteResult> <deletedCount>123</deletedCount> </DeleteResult>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
