/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (7.0.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package itmo.cityservice.api;

import itmo.cityservice.controller.ApiUtil;
import itmo.cityservice.model.dto.CityDTO;
import itmo.cityservice.model.dto.CreateCityRequest;
import itmo.cityservice.model.dto.GetCities200Response;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;

import jakarta.validation.Valid;
import jakarta.validation.constraints.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import jakarta.annotation.Generated;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2025-10-16T12:00:39.661908700+03:00[Europe/Moscow]")
@Validated
@Controller
public interface CitiesApi {

    default Optional<NativeWebRequest> getRequest() {
        return Optional.empty();
    }

    /**
     * DELETE /cities/{id} : Удалить город по id
     *
     * @param id id удаляемого города (required)
     * @return Город удален (status code 204)
     *         or Город не найден (status code 404)
     *         or Неверный ID (status code 400)
     *         or Непредвиденная ошибка (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.DELETE,
        value = "/cities/{id}",
        produces = { "application/xml" }
    )
    default ResponseEntity<Void> citiesIdDelete(
        @Min(1L)  @PathVariable("id") Long id
    ) throws Exception {
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

    
    /**
     * GET /cities/{id} : Получить город по id
     *
     * @param id ID города (required)
     * @return Успешный ответ (status code 200)
     *         or Неверный ID (status code 400)
     *         or Город с указанным ID не найден (status code 404)
     *         or Непредвиденная ошибка (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cities/{id}",
        produces = { "application/xml" }
    )
    default ResponseEntity<CityDTO> citiesIdGet(
        @Min(1L)  @PathVariable("id") Long id
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<City> <id>123456789</id> <name>Санкт-Петербург</name> <creationDate>2000-01-23T04:56:07.000Z</creationDate> <area>123</area> <population>123</population> <metersAboveSeaLevel>3.149</metersAboveSeaLevel> <carCode>123456789</carCode> <climate>aeiou</climate> <standardOfLiving>aeiou</standardOfLiving> </City>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * POST /cities/{id} : Создать новый город
     * Создает новый город
     *
     * @param id ID города (required)
     * @param createCityRequest  (required)
     * @return Город успешно создан (status code 201)
     *         or Неверные данные запроса (status code 400)
     *         or Ошибка валидации тела запроса (status code 422)
     *         or Внутренняя ошибка сервера (status code 500)
     *         or Непредвиденная ошибка (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.POST,
        value = "/cities/{id}",
        produces = { "application/xml" },
        consumes = { "application/xml" }
    )
    default ResponseEntity<CityDTO> citiesIdPost(
        @Min(1L)  @PathVariable("id") Long id,
         @Valid @RequestBody CreateCityRequest createCityRequest
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<City> <id>123456789</id> <name>Санкт-Петербург</name> <creationDate>2000-01-23T04:56:07.000Z</creationDate> <area>123</area> <population>123</population> <metersAboveSeaLevel>3.149</metersAboveSeaLevel> <carCode>123456789</carCode> <climate>aeiou</climate> <standardOfLiving>aeiou</standardOfLiving> </City>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * PUT /cities/{id} : Обновить город по идентификатору
     *
     * @param id ID обновляемого города (required)
     * @param createCityRequest  (required)
     * @return Город успешно обновлен (status code 200)
     *         or Ошибка валидации данных (status code 400)
     *         or Город не найден (status code 404)
     *         or Ошибка валидации тела запроса (status code 422)
     *         or Непредвиденная ошибка (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.PUT,
        value = "/cities/{id}",
        produces = { "application/xml" },
        consumes = { "application/xml" }
    )
    default ResponseEntity<CityDTO> citiesIdPut(
        @Min(1L)  @PathVariable("id") Long id,
         @Valid @RequestBody CreateCityRequest createCityRequest
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<City> <id>123456789</id> <name>Санкт-Петербург</name> <creationDate>2000-01-23T04:56:07.000Z</creationDate> <area>123</area> <population>123</population> <metersAboveSeaLevel>3.149</metersAboveSeaLevel> <carCode>123456789</carCode> <climate>aeiou</climate> <standardOfLiving>aeiou</standardOfLiving> </City>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }


    /**
     * GET /cities : Получить список городов
     * Поиск и фильтрация списка городов с поддержкой пагинации
     *
     * @param sort Сортировка элемнтов массива (optional)
     * @param page Номер страницы (optional, default to 1)
     * @param pageSize Размер страницы (optional, default to 10)
     * @param filter Параметры фильтрации в формате field[operator]&#x3D;value. Доступные операторы: eq, ne, gt, lt, gte, lte, like, in, notin. Примеры: name[eq]&#x3D;Moscow, area[gt]&#x3D;100, climate[in]&#x3D;OCEANIC,STEPPE  (optional)
     * @return Успешный ответ (status code 200)
     *         or Неверные входные данные (status code 400)
     *         or Внутренняя ошибка сервера (status code 500)
     *         or Непредвиденная ошибка (status code 200)
     */
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/cities",
        produces = { "application/xml" }
    )
    default ResponseEntity<GetCities200Response> getCities(
         @Valid @RequestParam(value = "sort", required = false) Optional<List<String>> sort,
         @Valid @RequestParam(value = "page", required = false, defaultValue = "1") Optional<@Min(1) Integer> page,
         @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "10") Optional<@Min(1) @Max(100) Integer> pageSize,
         @Valid @RequestParam(value = "", required = false) Optional<Map<String, String>> filter
    ) throws Exception {
        getRequest().ifPresent(request -> {
            for (MediaType mediaType: MediaType.parseMediaTypes(request.getHeader("Accept"))) {
                if (mediaType.isCompatibleWith(MediaType.valueOf("application/xml"))) {
                    String exampleString = "<CitiesResponse> <data> </data> <page>1</page> <pageSize>10</pageSize> <totalPages>26</totalPages> </CitiesResponse>";
                    ApiUtil.setExampleResponse(request, "application/xml", exampleString);
                    break;
                }
            }
        });
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);

    }

}
